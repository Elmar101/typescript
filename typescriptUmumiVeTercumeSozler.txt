*******************************************************************************************************************

literal  - kelmesi kelmesine, aynisi, herfi => yeni name = name - herfi uyqunluq
specify  - dəqiqləşdirmək, yəqinləşdirmək, belirtmek
known    - bilinen, taninan ,məlum, bəlli
unions   - bitlikler
mutable  - dəyişkən
assign   - təyin etmək,atamak

Discriminated  - Ayrı-seçkilik,fərqli əlamətlərə malik olmaq, fərq qoymaq,ayrı tutmak,farklı muamele etmek

assignable - təyin edilə bilən, atanabilir, verilebilir

is not assignable - təyin edilə bilməz ,atanamaz

x does not exist in type X - X tipinde x mevcut değildir.

cannot be assigned to the mutable - dəyişənlərə təyin edilə bilməz,değişkene atanamaz

*******************************************************************************************************************

=> void funuksia geriye nese qaytarmir eger qaytarsada undefined qaytarir !!
!* let x = function myFn():void{ console.log("qaqa x in deyeri undefined-dir") } => x == undefined - true 

*******************************************************************************************************************

=> type  union - type x = string | number | boolean | string[] | number[] 
type MyBool = true | false;
type WindowStates = "open" | "closed" | "minimized";
type LockStates = "locked" | "unlocked";
type PositiveOddNumbersUnderTen = 1 | 3 | 5 | 7 | 9;
function getLength(p1: string | string[]):number { return p1.length; }
union - birlik,mutefik
Type Aliases - Tür Takma Adlar
Interfaces - Arayüzler
Assertion - iddia, hakkinda arama
Enums     -   Numaralandırmalar
Narrowing - daraltma2
typeof - tip muhafızlar
*******************************************************************************************************************

Bir dəğişkənin tipini öğrənmək üçün - typeof - Bu kəlmədən istifadə edirik 
string	  |   typeof s === "string"
number    |   typeof n === "number"
boolean	  |   typeof b === "boolean"
undefined |	  typeof undefined === "undefined"
function  |   typeof f === "function"
array	  |   Array.isArray(a)

*******************************************************************************************************************

Non-null Assertion Operator (Postfix!) - Null Olmayan Onaylama Operatörü (Sonek!)

*******************************************************************************************************************
JavaScript'te if - in false olduqu durumlar => 0 , ""  (boş string), undefined , null, NaN
yoxlamaq Üçün - Boolean(data) - BU METODLA YOXLAYA BİLERSİZ !!!
console.log( "BOŞ STRİNG - " ,  Boolean("") );// false
console.log( "SİFR STRİNG - " , Boolean(0) );// false
console.log( "NaN - " ,         Boolean(NaN) );// false
console.log( "Null - " ,        Boolean(null) );// false
console.log( "UNDEFİNED - " ,   Boolean(undefined) );// false
console.log( "ARRAY - " ,       Boolean([].length )); // false   //ARRAYIN YOXLANMASI
const objCheck = {};
console.log( "OBJECT - " ,      Boolean(Object.entries(objCheck).length )) ; //false // OBJECTIN YOXLANMASI

UNUDMA !!!
Boolean("hello"); // true
Boolean(1); // true
Boolean([]); // true
Boolean({}) ; // true

**************************************************************************************************************
=> in operatöru ile Objecti yoxlamaq => property adi varmi => if(propertyAd in ObjectAd) vars trur yoxsa false
type Fish = { swim: () => void };
type Bird = { fly: () => void };
type Human = { swim?: () => void; fly?: () => void };
 
function move(animal: Fish | Bird | Human) {
  if ("swim" in animal) { animal; =>(parameter) animal: Fish | Human } 
  else { animal; => (parameter) animal: Bird | Human }
}

let baliq: Fish = { swim(){ console.log('i am baliq')} }// Bele yazlişdan daha çox istifadə edilir !!!
move(baliq);  => i am baliq

let qush: Bird = { fly: ()=> { console.log('i am qush')} }
move(qush); => i am qush


****************************************************************************************************************

=> instanceof ile yoxlamaq 

function logValue(x: Date | string) {
  if (x instanceof Date) { console.log(x.toUTCString());     (parameter) x: Date } 
  else { console.log(x.toUpperCase()); (parameter) x: string }
}

logValue("Hello str"); => HELLO STR
logValue( new Date() ); => Fri, 08 Oct 2021 13:43:55 GMT

*****************************************************************************************************************

=> Assignments - Atamalar => TypeScript, atamanın sağ tarafına bakar ve sol tarafı uygun şekilde bize qaytarar
- random olaraq Math.random() qiymet alir ve hemin qiymete gore  r in tipi melum olur r ya 10 yada hello world olur 
=>r =  10  r in tipi  number OR r =  hello world!  r in tipi  string

let r: string | number = Math.random() < 0.5 ? 10 : "hello world!";
console.log("r = ", r , " r in tipi ", typeof r);  

******************************************************************************************************************
=> Using type predicates - Tip predikatlarından istifadə
=> parameterName is Type => pet is Fish = boolean

type Fishs = { swim: () => void };
type Birds = { fly: () => void };

function isFish(pet: Fishs | Birds): pet is Fish { 
    pet is Fish =>return boolean qaytarmasidi yeni funuksia tru yada false qaytaracaq 
    return bize true yaxud false qaytarir

    return (pet as Fish).swim !== undefined;
}

let baliqlar: Fishs = { swim(){ console.log('i am baliq')} }
let isfish = isFish(baliqlar);
console.log("baliqdirmi:", isfish);//true

let qushlar: Bird = { fly:()=> { console.log('i am qush')} }
    isfish = isFish(qushlar);
    console.log("baliqdirmi:", isfish);//false



*******************************************************************************************************************
=> Discriminated unions - Ayrımcı birlikler
=> ! - shape.radius! -> shapede radius -un kesinlikle mevcut olduğunu söylemek için boş olmayan bir iddia
interface Shape {
    kind: "circle" | "square";
    radius?: number;
    sideLength?: number;
}

function handleShape(shape: Shape) {

    if (shape.kind === "circle") {
        return "circle";
    }
    else return "square";
}

function getArea(shape: Shape) {
    return Math.PI * shape.radius! ** 2;
}

2 ci yol discriminated unions switch ile

interface Circle {
    kind: "circle";
    radius: number;
  }
   
  interface Square {
    kind: "square";
    sideLength: number;
  }
   
  type Shape = Circle | Square;

  function getArea2(shape: Shape) {
    switch (shape.kind) {
        case "circle" :  return Math.PI * shape.radius ** 2 ; break;
        case "square" :  return Math.PI * shape.sideLength **2 ; break
    }
  }



******************************************************************************************************************
=> Exhaustiveness checking - Kapsamlılık kontrolü (never)
- neverTürü, her tür tayin edilebilir; ancak, hiçbir tür atanamaz never( neverkendisi dışında ). 
  Bu, daraltmayı kullanabileceğiniz ve neverbir switch ifadesinde kapsamlı kontrol yapmak için 
  açmaya güvenebileceğiniz anlamına gelir .
  Örneğin, bir ekleme default bizim için getAreaşekil atamak çalışır 
  fonksiyonu nevermümkün olan her durumda ele alınmayınca irade zam.

interface Circle {
    kind: "circle";
    radius: number;
  }
   
  interface Square {
    kind: "square";
    sideLength: number;
  }
type Shape = Circle | Square;
 
function getArea(shape: Shape) {
  switch (shape.kind) {
    case "circle":
      return Math.PI * shape.radius ** 2;
    case "square":
      return shape.sideLength ** 2;
    default:
      const _exhaustiveCheck: never = shape;
      return _exhaustiveCheck;
  }
}

indi yeni bir tip elave edek never hemen error verecek çünki never heç bir tip olmayanda default qaytarir

interface Triangle {
  kind: "triangle";
  sideLength: number;
}

type Shape = Circle | Square | Triangle

function getArea(shape: Shape) {
  switch (shape.kind) {
    case "circle":
      return Math.PI * shape.radius ** 2;
    case "square":
      return shape.sideLength ** 2;
    default:
      const _exhaustiveCheck: never = shape;  => burada error bash verecek 3 ci case yazmamisiq die
      return _exhaustiveCheck;
  }
}

- asaqidaki sekilde olmalidi !!!!

function getArea(shape: Shape) {
  switch (shape.kind) {
    case "circle":
      return Math.PI * shape.radius ** 2;

    case "square":
      return shape.sideLength ** 2;

    case "triangle":
      return Math.PI * shape.sideLength ** 2;

    default:
      const _exhaustiveCheck: never = shape;  => burada error bash verecek 3 ci case yazmamisiq die
      return _exhaustiveCheck;
  }
}
 
**************************************************************************************************************
=> Function Type Expressions

function greeter(fn: (a: string) => void) {
  fn("Hello, World");
}
 
function printToConsole(s: string) {
  console.log(s);
}
 
greeter(printToConsole);

-------------------------------------------------------------------------------------------------------------
=> Type ile fn parametresinin tipini yazmaq

type GreetFunction = (a: string) => void;

function greeterT(fn: GreetFunction) {
    fn("Hi, World");
}
greeterT(printToConsole); => Hi World

--------------------------------------------------------------------------------------------------------------
=> Constructor oluşdurmaq !!! new anahtar keslmesinden istifade etmeliyem

class Greet {
    constructor(a:number, b: boolean){

    } 
}

let greet = new Greet(7, true); => Greet Classinin Constructorunu Tetikleyir 

type SomeConstructor = {
    new (s: string): SomeObject
}

function fn(ctor: SomeConstructor){
    return new ctor("Hello, world!");
}




*******************************************|... => yerde qalan arreydi !|*****************************************

 // ... => yerde qalan arreydi !

 function multiply(n: number, ...m: number[]) {
    return m.map((x) => n * x);
  }
  // 'a' gets value [10, 20, 30, 40]
  const mkk = multiply(10, 1, 2, 3, 4);
  console.log("mk: ", mkk); //[10, 20, 30, 40]



 *********************************************|Destructuring assignment|*****************************************

  function sum({ a, b, c }) {
    return a + b + c;
  }
  let cm = sum({ a: 10, b: 3, c: 9 });
  console.log("cem is  ", cm)// cem is 22

  Objectin top açıklaması, Destructuring sonra gelir=>{ a, b, c }: { a: number; b: number; c: number }
  çünki { a: number; b: number; c: number } => Bele Yazlim Objesi Yoxdur Ay Qaqa interface yazmirsanee
  Object Destructuring di => {a}:{a: string} Unutma !!!

  function sum(  { a, b, c }: { a: number; b: number; c: number }  ) {
    console.log(a + b + c);
  }

  k=> Asaqidaki kimide yazmaq olar 

  type ABC = { a: number; b: number; c: number };
  function sum({ a, b, c }: ABC) { console.log(a + b + c) }

 *********************************************|indexable interface|********************************************
  
[index: string]: number | string; - Objectin içindeki propertilerin tipini Melum edir hemde interfacedeki
[ Objectin içndeki properitilerin valuelerinin tiplerini melum edir ]: bura interfacedeki properitilerin 
tipini melum edir
[index: string] => Objectdeki properitilerin valueleri string tipde olacaq hamisi
[]: string => interfaceye diger tipler elave edecemse string sekilinde olacaqlar ve onlar objecte mütleq olmalidilar
eger optional deyillerse !!!
indexable []: T -> isdeye baqlidi objectede properiti teyin et deyeri =>[burdaki tipde olsun qaqa!!!] 
// readonly indexable tipinde olan datanin deyisilmez olduqunu deyerini heç yerde deyişə bilmərik
interface INumberIndexNumber {
    [index: number]: string;
}

let arrNumberIndex: INumberIndexNumber = ["Bob", "Fred"];

let obj: INumberIndexNumber = {
    1: "elmar",
    2: " amanov"
}

console.log("myArray: " + arrNumberIndex);
console.log("myArray[0]: " + arrNumberIndex[0]);
console.log("myArray[1]: " + arrNumberIndex[1]);

let myIndexArr: string = arrNumberIndex[0];

interface IStringIndexObj {
    [index: string]: string;
}

//---------------------------indexable interface --------------------//
/*/
interface indexableType {
    [index: string]: string;
}
=> [index: string]: string; bele indexable interfacesinin 
   arrayi olmur çünki arreyin index number olur yeni 
   [index: number]: string ; bundan array yaratmaq olar 
   hemçinin objektde 
   [index: string]: string; bundan ancaq objekt yaratmaq 
   olar {name: "Elmar",.......}
/*/

let StringIndexObj: IStringIndexObj = {
    name: "elmar",
    ["sname"]: "Amanov",
};

console.log("StringIndexObj: " + StringIndexObj);
console.log("StringIndexObj.name: " + StringIndexObj.name);
console.log("StringIndexObj.sname: " + StringIndexObj.sname);
/*/
interface NumberOrStringDictionary {
    [index: string]: number 
    length: number; // ok, length is a number
    name: string; // error
}
/*/
interface NumberOrStringDictionary {
    [index: string]: number | string; // Objectin içindeki propertilerin tipini Melum edir  hemde interfacedeki
    length: number; // ok, length is a number
    name: string; // ok, name is a string
}

let nmArr: NumberOrStringDictionary = {
    length: 7,
    name: "Elmar",
    //[index: string]: number | string; => Bu diger propertiler kech deyeri string yada number olsun!!!
    l: 8,
    sname: "Amanov"
}

interface NumberOrStringDictionary1 {
    [index: number]: number | string; //index: number-> Objectin içindeki propertilerin tipini Melum edir
    // [Objectin içndeki properitilerin tiplerini melum edir]: bura interfacedeki properitilerin tipini melum edir
    length: number; // ok, length is a number - []: number | string [] -> bundan sonrasina baxir
    name: string; // ok, name is a string
}

let nmArray: NumberOrStringDictionary = {
    length: 7,
    name: "Elmar",
    //[index: string]: number | string; => Bu diger propertiler kech deyeri string yada number olsun!!!
    0: 8,
    1: "Amanov"
}

interface NumberOrStringDictionary2 {
    [index: number | string]: number | string; 
    id: number; 
    name: string; 
}

//let dictonaryArr: NumberOrStringDictionary2 = ["a","b","c"]// error id ve name var
let dictonaryObj: NumberOrStringDictionary2= {id: 1 , name: "Elmar", sname: "Amanov", 1: "Web Teacher" }

// readonly indexable tipinde olan datanin deyisilmez olduqunu deyerini heç yerde deyişə bilmərik
interface ReadonlyStringArray {
    readonly [index: number]: string;
}
let readonlyStringArr:ReadonlyStringArray = ["a","b","c"]
    //readonlyStringArr[0] = "d" - error
   // readonlyStringArr.push("d") - error ve sair
interface ReadonlyStringObject {
    readonly [index: number]: string;
    x: string
}
let readonlyStringObj: ReadonlyStringObject = {
    x: "A",
    1: "B",
    2: "C"
}
//readonlyStringObj.1 = "D" => error

console.log("*************************************|TYPE GENERICS|***************************************");

type genericsDataType<T> = T ;
let gdt: genericsDataType<string> = "Elmar"

Array<Type>olan Type[] eyni olduqu kimi ReadonlyArray<Type> ile readonly Type[] eynidi

 type OrNull<Type> = Type | null;
    
type OneOrMany<Type> = Type | Type[];

type OneOrManyOrNull1<Type> = OrNull<OneOrMany<Type>>;
        
type OneOrManyOrNull2<Type> = OneOrMany<Type> | null

type OneOrManyOrNullStrings1 = OneOrManyOrNull1<string>;
            
type OneOrManyOrNullStrings2 = OneOrMany<string> | null



 **************************************************|Tuple Types|*************************************************
  Tuple Types - Bu tip Arreyin indexlerinin Hansi Tipde olduqunu Teyin Etmekden ötridi - [number,string,boolean];

  type StringNumberPair = [string, number];
  function doSomethingPair(pair: [string, number]):[string, number] {
    return pair
  }
   
  let pr = doSomethingPair(["hello", 42]);
  console.log("pair: " , pr);

  function doSomethingPair1(pair: [string, number]){
    const [a,b] = pair;
    return a + b
  }
   
  let pr1 = doSomethingPair1(["hello", 42]);
  console.log("pair: " , pr1);

  interface IStringNumberPair {
    length: 2;
    0: string;
    1: number;
    slice(start?: number, end?: number): Array<string | number>;
  }

  type Either2dOr3d = [number, number, number?];

  function setCoordinate(coord: Either2dOr3d) {
    const [x, y, l] = coord;
   
    return console.log(`array ${coord.length} lenght`);
                                                    
  }

  setCoordinate([1,2]);

  type StringNumberBooleans = [string, number, ...boolean[]];
  type StringBooleansNumber = [string, ...boolean[], number];
  type BooleansStringNumber = [...boolean[], string, number];

  /*/
    StringNumberBooleansilk iki elemanı sırasıyla stringve numberolan, ancak booleanaşağıdaki 
    herhangi bir sayıda s olabilen bir demeti tanımlar .

    StringBooleansNumberilk öğesi stringve ardından herhangi bir sayıda booleans olan 
    ve a ile biten bir demeti tanımlar number.
    
    BooleansStringNumberbaşlangıç ​​öğeleri herhangi bir sayıda booleans olan ve 
    stringardından a ile biten bir demeti tanımlar number.
  /*/

  const snb1: StringNumberBooleans = ["hello", 1];
  const snb2: StringNumberBooleans = ["beautiful", 2, true];
  const snb3: StringNumberBooleans = ["world", 3, true, false, true, false, true];

  const sbn1: StringBooleansNumber = ["hello", 1];
  const sbn2: StringBooleansNumber = ["beautiful", true, 2];
  const sbn3: StringBooleansNumber = ["world", true, false, true, false, true, 3];

  const bsn1: BooleansStringNumber = ["hello", 1];
  const bsn2: BooleansStringNumber = [true, "beautiful", 2];
  const bsn3: BooleansStringNumber = [true, false, true, false, true, "world",  3];

  function readButtonInput(...args: [string, number, ...boolean[]]) {
    const [name, version, ...input] = args;
    return console.log("name + version + input = ",name +","+ version +","+ input);
  }

  //readonly tuple tip     pair: readonly[number, string]

  function doSomethingReadOnly(pair: readonly [string, number]) {
    //pair[0] = "hello!"; error !!!
  }

  let point = [3, 4] as const;//let point = [3, 4] as const; === let point: readonly [3, 4] Eynidi !!!!
 
  function distanceFromOrigin([x, y]: [number, number]) {
    return Math.sqrt(x ** 2 + y ** 2);
  }
 
  //distanceFromOrigin(point); - ERROR ÇÜNKİ DƏYİŞƏNİN VALUESİNİ as const TİPDƏ EDƏNDƏ DƏYİŞƏN -READONLY- OLUR !!!